{"name":"Djinn","tagline":"A visual tool that creates dependency graphs between arbitrary sets of jars, classes, packages and java projects.","body":"djinn, the java dependency explorer [![Build Status](https://travis-ci.org/fabienbk/djinn.png?branch=master)](https://travis-ci.org/fabienbk/djinn)\r\n===================================\r\n\r\nDescription\r\n-----------\r\n\r\nA visual tool that creates dependency graphs between arbitrary sets of jars, classes, packages and java projects.\r\n\r\nDjinn can be used to :\r\n* Analyze legacy codebases that do not rely on dependency management systems (such as maven or \r\nivy) and then produce information that facilitate migration to these systems;\r\n* Locate, and fix cyclic dependencies;\r\n* Understand how a project is structured to gain comprehension quicker.\r\n\r\n![screenshot](http://blog.scramcode.com/static/img/djinn-graph-example.png)\r\n\r\nThere is still a lot of work to do - the tool only provides basic functionality currently.\r\n\r\nBuilding and running\r\n--------------------\r\n\r\nThe project requires [Maven](http://maven.apache.org/download.cgi) for building, and JDK 7 (or later).\r\nIt has been tested under Windows and Linux, although it should run wherever Swing Applications are supported.\r\n\r\nTo build the runnable jar, simply run:\r\n\r\n```bash\r\nmvn compile assembly:single\r\n```\r\n\r\nThe artifact generated is target/djinn-gui.jar subdirectory. You can run it using :\r\n\r\n```bash\r\njava -jar target/djinn-gui.jar\r\n```\r\n\r\nIf you're a clicky person, flip the executable permission flag, and you should be able to run djinn by double-clicking on the jar, under linux or windows.\r\n\r\nGetting Started\r\n---------------\r\n\r\n*Section to be done after 0.2 release\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}